#!/usr/bin/env python3
"""
Script de configura√ß√£o inicial do Sistema de Empenhos
"""

import os
import sys
import subprocess
from pathlib import Path

def print_header():
    """Imprime cabe√ßalho do setup"""
    print("=" * 60)
    print("    SISTEMA DE EMPENHOS - CONFIGURA√á√ÉO INICIAL")
    print("=" * 60)
    print()

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    print("üîç Verificando vers√£o do Python...")
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio!")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} - OK")
    return True

def install_dependencies():
    """Instala as depend√™ncias do projeto"""
    print("\nüì¶ Instalando depend√™ncias...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    directories = [
        "uploads",
        "backups",
        "logs",
        "instance"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio '{directory}' criado/verificado")

def create_env_file():
    """Cria arquivo de configura√ß√£o .env"""
    print("\n‚öôÔ∏è  Criando arquivo de configura√ß√£o...")
    
    env_content = """# Configura√ß√µes do Sistema de Empenhos
FLASK_APP=app.py
FLASK_ENV=development
SECRET_KEY=sua-chave-secreta-muito-segura-aqui-mude-em-producao
DATABASE_URL=sqlite:///empenhos.db

# Configura√ß√µes de Upload
MAX_CONTENT_LENGTH=16777216
UPLOAD_FOLDER=uploads

# Configura√ß√µes de Email (opcional)
MAIL_SERVER=smtp.gmail.com
MAIL_PORT=587
MAIL_USE_TLS=True
MAIL_USERNAME=seu-email@gmail.com
MAIL_PASSWORD=sua-senha-de-app

# Configura√ß√µes de Backup
BACKUP_FOLDER=backups
AUTO_BACKUP=True
BACKUP_RETENTION_DAYS=30
"""
    
    if not os.path.exists('.env'):
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        print("‚úÖ Arquivo .env criado")
    else:
        print("‚ÑπÔ∏è  Arquivo .env j√° existe")

def initialize_database():
    """Inicializa o banco de dados"""
    print("\nüóÑÔ∏è  Inicializando banco de dados...")
    try:
        # Importar e executar a fun√ß√£o de cria√ß√£o de tabelas
        from app import create_tables
        create_tables()
        print("‚úÖ Banco de dados inicializado com sucesso!")
        print("   Usu√°rio admin criado: admin / admin123")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao inicializar banco: {e}")
        return False

def create_startup_scripts():
    """Cria scripts de inicializa√ß√£o"""
    print("\nüìú Criando scripts de inicializa√ß√£o...")
    
    # Script para Windows
    windows_script = """@echo off
echo Iniciando Sistema de Empenhos...
python app.py
pause
"""
    
    with open('start_windows.bat', 'w', encoding='utf-8') as f:
        f.write(windows_script)
    
    # Script para Linux/Mac
    unix_script = """#!/bin/bash
echo "Iniciando Sistema de Empenhos..."
python3 app.py
"""
    
    with open('start_unix.sh', 'w', encoding='utf-8') as f:
        f.write(unix_script)
    
    # Tornar execut√°vel no Unix
    try:
        os.chmod('start_unix.sh', 0o755)
    except:
        pass
    
    print("‚úÖ Scripts de inicializa√ß√£o criados")

def create_readme():
    """Cria arquivo README com instru√ß√µes"""
    print("\nüìñ Criando documenta√ß√£o...")
    
    readme_content = """# Sistema de Empenhos

Sistema web completo para gest√£o de empenhos e contratos.

## üöÄ Como Usar

### Primeira Execu√ß√£o
1. Execute o setup: `python setup.py`
2. Inicie o sistema: `python app.py`
3. Acesse: http://localhost:5000
4. Login: admin / admin123

### Funcionalidades
- ‚úÖ Gest√£o completa de empenhos
- ‚úÖ Controle de contratos
- ‚úÖ Importa√ß√£o de planilhas Excel/CSV
- ‚úÖ Exporta√ß√£o para PDF/Excel
- ‚úÖ Relat√≥rios e dashboards
- ‚úÖ Sistema de usu√°rios
- ‚úÖ C√°lculos autom√°ticos
- ‚úÖ Backup autom√°tico

### Estrutura do Projeto
```
empenhos/
‚îú‚îÄ‚îÄ app.py              # Aplica√ß√£o principal
‚îú‚îÄ‚îÄ requirements.txt    # Depend√™ncias
‚îú‚îÄ‚îÄ models/            # Modelos do banco
‚îú‚îÄ‚îÄ routes/            # Rotas da aplica√ß√£o
‚îú‚îÄ‚îÄ templates/         # Templates HTML
‚îú‚îÄ‚îÄ utils/             # Utilit√°rios
‚îú‚îÄ‚îÄ uploads/           # Arquivos enviados
‚îî‚îÄ‚îÄ backups/           # Backups do sistema
```

### Importa√ß√£o de Dados
1. Baixe o template na p√°gina de importa√ß√£o
2. Preencha os dados seguindo o formato
3. Fa√ßa upload do arquivo
4. Verifique os resultados

### Backup e Restaura√ß√£o
- Backups autom√°ticos s√£o criados diariamente
- Use a fun√ß√£o "Backup do Sistema" no menu admin
- Arquivos ficam na pasta `backups/`

### Suporte
Para d√∫vidas ou problemas, consulte os logs em `logs/` ou contate o administrador.

## üîß Configura√ß√£o Avan√ßada

### Vari√°veis de Ambiente (.env)
- `SECRET_KEY`: Chave secreta da aplica√ß√£o
- `DATABASE_URL`: URL do banco de dados
- `UPLOAD_FOLDER`: Pasta para uploads
- `BACKUP_FOLDER`: Pasta para backups

### Personaliza√ß√£o
- Modifique `templates/` para alterar a interface
- Ajuste `models/` para novos campos
- Configure `utils/` para novas funcionalidades

## üìä Relat√≥rios Dispon√≠veis
- Dashboard com estat√≠sticas
- Relat√≥rios filtrados por per√≠odo/status
- Exporta√ß√£o em Excel e PDF
- Gr√°ficos interativos

## üîê Seguran√ßa
- Autentica√ß√£o de usu√°rios
- Controle de permiss√µes
- Valida√ß√£o de dados
- Backup autom√°tico
"""
    
    with open('README.md', 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print("‚úÖ README.md criado")

def print_success():
    """Imprime mensagem de sucesso"""
    print("\n" + "=" * 60)
    print("üéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("=" * 60)
    print()
    print("üìã Pr√≥ximos passos:")
    print("   1. Execute: python app.py")
    print("   2. Acesse: http://localhost:5000")
    print("   3. Login: admin / admin123")
    print()
    print("üìÅ Arquivos criados:")
    print("   ‚Ä¢ .env (configura√ß√µes)")
    print("   ‚Ä¢ README.md (documenta√ß√£o)")
    print("   ‚Ä¢ start_windows.bat (Windows)")
    print("   ‚Ä¢ start_unix.sh (Linux/Mac)")
    print()
    print("üîß Para personalizar, edite o arquivo .env")
    print("üìñ Consulte o README.md para mais informa√ß√µes")
    print()

def main():
    """Fun√ß√£o principal do setup"""
    print_header()
    
    # Verifica√ß√µes e instala√ß√µes
    if not check_python_version():
        return False
    
    if not install_dependencies():
        return False
    
    create_directories()
    create_env_file()
    
    if not initialize_database():
        return False
    
    create_startup_scripts()
    create_readme()
    
    print_success()
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            print("\n‚ùå Setup falhou. Verifique os erros acima.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Setup cancelado pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
