from flask import Blueprint, render_template, request, jsonify, flash, url_for
from flask_login import login_required, current_user
from datetime import datetime, timedelta
from sqlalchemy import func, text
from models_chat import ChatMessage, ChatSession
from models import db
import uuid
import os

# OpenAI opcional
OPENAI_AVAILABLE = False
try:
    import openai
    if os.getenv("OPENAI_API_KEY"):
        openai.api_key = os.getenv("OPENAI_API_KEY")
        OPENAI_AVAILABLE = True
except Exception:
    OPENAI_AVAILABLE = False

chat = Blueprint('chat', __name__, url_prefix='/chat')

# ----------------------
# Views / Pages
# ----------------------
@chat.route('/')
@login_required
def index():
    try:
        # Minhas sess√µes
        sessions = (ChatSession.query
                    .filter_by(user_id=current_user.id)
                    .order_by(ChatSession.last_message_at.desc())
                    .all())

        # Carrega sess√£o atual (se houver)
        session_id = request.args.get('session_id')
        messages = []
        if session_id:
            messages = (ChatMessage.query
                        .filter_by(session_id=session_id)
                        .order_by(ChatMessage.timestamp.asc())
                        .all())

        return render_template('chat/index.html',
                               sessions=sessions,
                               messages=messages,
                               current_session_id=session_id)
    except Exception as e:
        flash(f'Erro ao carregar chat: {e}', 'error')
        return render_template('chat/index.html', sessions=[], messages=[], current_session_id=None)

# ----------------------
# API: Sess√£o
# ----------------------
@chat.route('/new_session', methods=['POST'])
@login_required
def new_session():
    try:
        sid = str(uuid.uuid4())
        s = ChatSession(session_id=sid, user_id=current_user.id, title='Nova Conversa')
        db.session.add(s)
        db.session.commit()
        return jsonify(success=True, session_id=sid, redirect_url=url_for('chat.index', session_id=sid))
    except Exception as e:
        db.session.rollback()
        return jsonify(success=False, error=str(e)), 500

@chat.route('/delete_session/<session_id>', methods=['DELETE'])
@login_required
def delete_session(session_id):
    try:
        session_obj = ChatSession.query.filter_by(user_id=current_user.id, session_id=session_id).first()
        if not session_obj:
            return jsonify(success=False, error="Sess√£o n√£o encontrada"), 404
        ChatMessage.query.filter_by(session_id=session_id).delete()
        db.session.delete(session_obj)
        db.session.commit()
        return jsonify(success=True)
    except Exception as e:
        db.session.rollback()
        return jsonify(success=False, error=str(e)), 500

@chat.route('/get_messages/<session_id>')
@login_required
def get_messages(session_id):
    try:
        s = ChatSession.query.filter_by(user_id=current_user.id, session_id=session_id).first()
        if not s:
            return jsonify(success=False, error="Sess√£o n√£o encontrada"), 404
        msgs = (ChatMessage.query
                .filter_by(session_id=session_id)
                .order_by(ChatMessage.timestamp.asc())
                .all())
        return jsonify(success=True, messages=[m.to_dict() for m in msgs])
    except Exception as e:
        return jsonify(success=False, error=str(e)), 500

# ----------------------
# API: Mensagens
# ----------------------
@chat.route('/ask', methods=['POST'])
@login_required
def ask():
    """
    API dedicada para perguntas diretas ao chat.
    Formato: {"question": "texto da pergunta"}
    Retorna: {"answer": "resposta", "kb_id": id ou null, "matched_question": "pergunta original" ou null}
    """
    try:
        data = request.get_json(force=True) or {}
        question = (data.get('question') or '').strip()
        
        if not question:
            return jsonify({"answer": "Digite uma pergunta.", "kb_id": None, "matched_question": None})
        
        # üîé 1¬∫ tenta no KB
        kb_match = kb_best_match(question)
        if kb_match:
            return jsonify({
                "answer": kb_match["answer"],
                "kb_id": kb_match["id"],
                "matched_question": kb_match["question"]
            })
        
        # ü§ñ 2¬∫ tenta OpenAI 
        if OPENAI_AVAILABLE:
            try:
                resp = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um assistente para gest√£o municipal (empenhos/contratos). Seja claro e √∫til."},
                        {"role": "user", "content": question}
                    ],
                    max_tokens=500,
                    temperature=0.7,
                    timeout=20
                )
                return jsonify({
                    "answer": resp.choices[0].message["content"],
                    "kb_id": None,
                    "matched_question": None
                })
            except Exception:
                pass
        
        # ‚ùå fallback se n√£o achou
        return jsonify({
            "answer": generate_mock_response(question),
            "kb_id": None,
            "matched_question": None
        })
        
    except Exception as e:
        return jsonify({
            "answer": f"Erro interno: {str(e)}",
            "kb_id": None,
            "matched_question": None
        }), 500

@chat.route('/test_kb', methods=['POST', 'GET'])
def test_kb():
    """
    Rota de teste para verificar integra√ß√£o do KB (sem login)
    """
    if request.method == 'GET':
        return jsonify({"message": "Use POST com {\"question\": \"sua pergunta\"}"})
    
    try:
        data = request.get_json(force=True) or {}
        question = (data.get('question') or '').strip()
        
        if not question:
            return jsonify({"answer": "Digite uma pergunta.", "kb_id": None, "matched_question": None})
        
        # üîé Busca no KB
        kb_match = kb_best_match(question)
        if kb_match:
            return jsonify({
                "answer": kb_match["answer"],
                "kb_id": kb_match["id"],
                "matched_question": kb_match["question"],
                "source": "KB"
            })
        
        # ‚ùå fallback
        return jsonify({
            "answer": generate_mock_response(question),
            "kb_id": None,
            "matched_question": None,
            "source": "MOCK"
        })
        
    except Exception as e:
        return jsonify({
            "answer": f"Erro interno: {str(e)}",
            "kb_id": None,
            "matched_question": None,
            "source": "ERROR"
        }), 500

@chat.route('/send_message', methods=['POST'])
@login_required
def send_message():
    try:
        data = request.get_json(force=True) or {}
        text = (data.get('message') or '').strip()
        sid = data.get('session_id')

        if not text:
            return jsonify(success=False, error="Mensagem vazia"), 400
        if not sid:
            return jsonify(success=False, error="Sess√£o inv√°lida"), 400

        sess = ChatSession.query.filter_by(user_id=current_user.id, session_id=sid).first()
        if not sess:
            return jsonify(success=False, error="Sess√£o n√£o encontrada"), 404

        # Resposta da IA (ou mock)
        answer = _generate_ai_response(text)

        # Persistir
        msg = ChatMessage(
            user_id=current_user.id,
            message=text,
            response=answer,
            session_id=sid
        )
        db.session.add(msg)

        # Atualizar sess√£o (t√≠tulo s√≥ se for "Nova Conversa")
        sess.last_message_at = datetime.utcnow()
        if sess.title == 'Nova Conversa':
            sess.title = (text[:50] + '‚Ä¶') if len(text) > 50 else text

        db.session.commit()

        return jsonify(success=True, message={
            'id': msg.id,
            'user_message': text,
            'ai_response': answer,
            'timestamp': msg.timestamp.strftime('%H:%M')
        })
    except Exception as e:
        db.session.rollback()
        return jsonify(success=False, error=str(e)), 500

# ----------------------
# API: Estat√≠sticas para gr√°fico
# ----------------------
@chat.route('/stats/messages_per_day')
@login_required
def messages_per_day():
    """
    Retorna { labels: [...], values: [...] } com a quantidade de mensagens do usu√°rio por dia (√∫ltimos 14 dias).
    Gr√°fico funciona mesmo sem IA.
    """
    try:
        # Janela de 14 dias
        start = (datetime.utcnow() - timedelta(days=13)).date()
        end = datetime.utcnow().date()

        # Agrupar por dia (compat√≠vel com SQLite e outros usando DATE(timestamp))
        rows = (db.session.query(
                    func.date(ChatMessage.timestamp).label('dia'),
                    func.count(ChatMessage.id).label('qtd')
                )
                .filter(ChatMessage.user_id == current_user.id)
                .filter(func.date(ChatMessage.timestamp) >= start)
                .filter(func.date(ChatMessage.timestamp) <= end)
                .group_by(func.date(ChatMessage.timestamp))
                .order_by(func.date(ChatMessage.timestamp))
                .all())

        # Montar mapa dia -> qtd
        mapa = {str(r.dia): r.qtd for r in rows}

        labels = []
        values = []
        cursor = start
        while cursor <= end:
            ds = cursor.isoformat()
            labels.append(cursor.strftime('%d/%m'))
            values.append(int(mapa.get(ds, 0)))
            cursor += timedelta(days=1)

        return jsonify(success=True, labels=labels, values=values)
    except Exception as e:
        return jsonify(success=False, error=str(e)), 500

# ----------------------
# Knowledge Base Integration
# ----------------------
def kb_best_match(pergunta: str):
    """
    Busca a melhor correspond√™ncia no Knowledge Base usando FTS5.
    Retorna dict com id, question, answer, score ou None se n√£o encontrar.
    """
    try:
        sql = """
        SELECT e.id, e.question, e.answer, bm25(ai_kb_entries_fts) AS score
        FROM ai_kb_entries_fts f
        JOIN ai_kb_entries e ON e.id = f.rowid
        WHERE e.is_active=1 AND ai_kb_entries_fts MATCH :q
        ORDER BY score ASC LIMIT 1;
        """
        row = db.session.execute(text(sql), {"q": pergunta}).mappings().first()
        return dict(row) if row else None
    except Exception as e:
        print(f"Erro na busca KB: {e}")
        return None

# ----------------------
# Internals
# ----------------------

# --- Respostas prontas (mock) turbinadas ---

def _kw(s):  # helper
    return (s or "").lower().strip()

def _match_any(text, *words):
    t = _kw(text)
    return any(w in t for w in words)

def generate_mock_response(message):
    """
    IA simulada para quando n√£o h√° OpenAI.
    Usa intents simples baseadas em palavras-chave (com sin√¥nimos) + respostas ricas.
    Seguro para produ√ß√£o: n√£o quebra nada, s√≥ retorna string.
    """
    msg = _kw(message)

    # ====== INTENTS ESPEC√çFICAS (ordem importa) ======
    # 1) Status de empenho por n√∫mero
    if _match_any(msg, "status", "situa√ß√£o") and _match_any(msg, "empenho", "empenhos"):
        return (
            "Para consultar o **status de um empenho**:\n"
            "1) V√° em **Empenhos ‚Üí Listar**\n"
            "2) Use a busca pelo **n√∫mero do empenho** ou **fornecedor**\n"
            "3) Na coluna *Status* voc√™ v√™: PENDENTE, APROVADO, LIQUIDADO, PAGO, etc.\n"
            "Dica: no filtro avan√ßado d√° pra combinar **per√≠odo**, **contrato** e **valor**."
        )

    # 2) Como criar empenho
    if _match_any(msg, "criar empenho", "novo empenho", "cadastrar empenho", "inserir empenho"):
        return (
            "Para **criar um empenho**:\n"
            "‚Ä¢ Acesse **Empenhos ‚Üí Novo**\n"
            "‚Ä¢ Preencha: n√∫mero, data, fornecedor, objeto, valores (empenhado/liquido/reten√ß√£o)\n"
            "‚Ä¢ (Opcional) amarre a um **contrato** ou **preg√£o**\n"
            "‚Ä¢ Salve e acompanhe o status no fluxo (PENDENTE ‚Üí APROVADO ‚Üí LIQUIDADO ‚Üí PAGO)"
        )

    # 3) Notas Fiscais: cadastrar/ligar ao empenho
    if _match_any(msg, "nota fiscal", "nf", "notas fiscais", "lancar nota", "cadastrar nota"):
        return (
            "Para **lan√ßar uma Nota Fiscal**:\n"
            "1) V√° em **Notas Fiscais ‚Üí Nova**\n"
            "2) Informe **empenho vinculado**, **data de emiss√£o**, **valor l√≠quido** e **vencimento**\n"
            "3) Status t√≠pico: EM_ABERTO ‚Üí PROCESSANDO ‚Üí PAGO\n"
            "Dica: no relat√≥rio financeiro voc√™ v√™ **pagas vs em aberto** por per√≠odo."
        )

    # 4) Relat√≥rios
    if _match_any(msg, "relat√≥rio", "relatorios", "relatorio", "dashboard", "anal√≠tico", "analytics"):
        return (
            "Relat√≥rios dispon√≠veis:\n"
            "‚Ä¢ **Relat√≥rio Filtrado**: filtros por data, status, contrato, preg√£o, fornecedor, valor\n"
            "‚Ä¢ **Financeiro**: empenhado, l√≠quido, reten√ß√µes, fluxo semanal e comparativo anual\n"
            "‚Ä¢ **Operacional**: produtividade, prazos (vencendo/vencidos) e distribui√ß√£o de status\n"
            "‚Ä¢ **Analytics**: tend√™ncias (90d), top fornecedores, KPIs (tempo m√©dio, execu√ß√£o, valor m√©dio)\n"
            "Exportes: Excel (habilitado), PDF/Backup (quando ativados)."
        )

    # 5) Contratos: criar/editar/aditivos
    if _match_any(msg, "contrato", "contratos"):
        if _match_any(msg, "aditivo", "aditivos", "apostilamento"):
            return (
                "Para **aditivos contratuais**:\n"
                "‚Ä¢ Abra o **Contrato** ‚Üí aba **Aditivos** ‚Üí **Novo Aditivo**\n"
                "‚Ä¢ Tipos comuns: **prorroga√ß√£o de prazo** e **reequil√≠brio/valor**\n"
                "‚Ä¢ O sistema atualiza o **prazo vigente** e o **valor total** automaticamente."
            )
        return (
            "Sobre **Contratos**:\n"
            "‚Ä¢ Cadastre em **Contratos ‚Üí Novo** (n¬∫, objeto, fornecedor, valor, datas)\n"
            "‚Ä¢ Status: ATIVO, FINALIZADO, CANCELADO\n"
            "‚Ä¢ Voc√™ pode vincular **empenhos** e **notas** ao contrato para vis√£o 360¬∞."
        )

    # 6) Fornecedores
    if _match_any(msg, "fornecedor", "fornecedores", "cadastrar fornecedor"):
        return (
            "Os **fornecedores** s√£o preenchidos nos pr√≥prios **Empenhos/Contratos**.\n"
            "Nos relat√≥rios voc√™ enxerga o **top fornecedores por valor** e **quantidade de empenhos**."
        )

    # 7) Permiss√µes / usu√°rios
    if _match_any(msg, "usu√°rio", "usuarios", "permiss√£o", "permissoes", "papel", "role", "acesso"):
        return (
            "Permiss√µes de acesso:\n"
            "‚Ä¢ **Administrador**: tudo\n"
            "‚Ä¢ **Gestor**: contratos, empenhos, relat√≥rios\n"
            "‚Ä¢ **Operador**: lan√ßamentos e consultas\n"
            "Pedir ajuste de perfil ao **admin** do sistema."
        )

    # 8) Exportar / Excel / PDF
    if _match_any(msg, "exportar", "excel", "xlsx", "planilha", "baixar relatorio", "pdf", "imprimir"):
        return (
            "Para **exportar**:\n"
            "‚Ä¢ No **Relat√≥rio Filtrado**, clique **Exportar Excel**\n"
            "‚Ä¢ Limite de ~10.000 registros por exporta√ß√£o (use filtros se passar)\n"
            "‚Ä¢ PDF e Backup podem estar temporariamente desabilitados."
        )

    # 9) Prazos / vencimentos / alertas
    if _match_any(msg, "vencendo", "vencidos", "prazo", "vencimento", "alerta", "atraso"):
        return (
            "Prazos e alertas:\n"
            "‚Ä¢ **Empenhos vencendo** (30 dias) e **vencidos** aparecem no dashboard e relat√≥rios\n"
            "‚Ä¢ **Notas vencidas** e **vencendo** (7 dias) tamb√©m geram alertas\n"
            "‚Ä¢ Use o filtro por per√≠odo p/ priorizar tratativas."
        )

    # 10) D√∫vidas de busca/filtros
    if _match_any(msg, "buscar", "pesquisa", "filtrar", "busca", "filtragem"):
        return (
            "Dicas de **filtro**:\n"
            "‚Ä¢ Combine **Data in√≠cio/fim** com **Status** para listas objetivas\n"
            "‚Ä¢ Use **contrato, preg√£o, fornecedor** e **faixa de valor**\n"
            "‚Ä¢ Ordene por **data** ou **valor** conforme a necessidade."
        )

    # 11) Login / sess√£o
    if _match_any(msg, "login", "logar", "senha", "acessar", "n√£o consigo entrar", "nao consigo entrar"):
        return (
            "Problemas de **login**:\n"
            "‚Ä¢ Verifique usu√°rio/senha\n"
            "‚Ä¢ Se sess√£o expirar, fa√ßa login novamente\n"
            "‚Ä¢ Caso persista, pe√ßa ao **admin** para redefinir credenciais."
        )

    # 12) Backup / restaura√ß√£o
    if _match_any(msg, "backup", "restaurar", "restaura√ß√£o", "c√≥pia", "exportar banco"):
        return (
            "Backup do sistema:\n"
            "‚Ä¢ Rotina de backup pode estar desabilitada nesta instala√ß√£o\n"
            "‚Ä¢ Em produ√ß√£o, recomenda-se **backup di√°rio** do SQLite/postgres\n"
            "‚Ä¢ Para restore, contate o administrador de TI."
        )

    # 13) Erros comuns
    if _match_any(msg, "erro", "bug", "travar", "travou"):
        return (
            "Se ocorrer algum **erro**:\n"
            "‚Ä¢ Recarregue a p√°gina e tente novamente\n"
            "‚Ä¢ Verifique se os campos obrigat√≥rios est√£o preenchidos\n"
            "‚Ä¢ Se persistir, copie a mensagem de erro e informe o **admin**."
        )

    # 14) KPIs / m√©tricas
    if _match_any(msg, "kpi", "m√©tricas", "indicadores", "tend√™ncia", "tendencias"):
        return (
            "KPIs e tend√™ncias (menu **Analytics**):\n"
            "‚Ä¢ **Tempo m√©dio** de processamento de empenhos\n"
            "‚Ä¢ **Taxa de execu√ß√£o** (liquidados/pagos)\n"
            "‚Ä¢ **Valor m√©dio** por empenho e **top fornecedores**\n"
            "‚Ä¢ **Varia√ß√£o** (90d vs 90d anterior)."
        )

    # 15) Ajuda / onboarding
    if _match_any(msg, "ajuda", "help", "como usar", "manual", "tutorial"):
        return (
            "Posso ajudar com:\n"
            "‚Ä¢ Criar empenhos, lan√ßar notas e vincular contratos\n"
            "‚Ä¢ Relat√≥rios financeiros/operacionais\n"
            "‚Ä¢ D√∫vidas de filtros e exporta√ß√µes\n"
            "‚Ä¢ **Lei 14.133/2021** (Nova Lei de Licita√ß√µes)\n"
            "Diga o que voc√™ precisa que eu te guio passo a passo."
        )

    # ====== LEI 14.133/2021 - NOVA LEI DE LICITA√á√ïES ======
    # 16) Lei 14.133 - conceitos gerais
    if _match_any(msg, "lei 14.133", "nova lei", "lei de licita√ß√µes", "lei 14133"):
        return (
            "**Lei 14.133/2021 - Nova Lei de Licita√ß√µes**\n"
            "‚Ä¢ Substitui a Lei 8.666/93, Lei do Preg√£o e RDC\n"
            "‚Ä¢ **Obrigat√≥ria desde 1¬∫/04/2023**\n"
            "‚Ä¢ Modalidades: Concorr√™ncia, Preg√£o, Concurso, Leil√£o, Di√°logo Competitivo\n"
            "‚Ä¢ **Extintas**: Convite e Tomada de Pre√ßos\n"
            "Quer saber sobre **modalidades**, **prazos**, **fases** ou **limites**?"
        )

    # 17) Modalidades de licita√ß√£o
    if _match_any(msg, "modalidades", "preg√£o", "concorr√™ncia", "di√°logo competitivo", "leil√£o", "concurso"):
        if _match_any(msg, "preg√£o", "pregao"):
            return (
                "**Preg√£o Eletr√¥nico** (Nova Lei):\n"
                "‚Ä¢ Para **bens e servi√ßos comuns**\n"
                "‚Ä¢ Prazo m√≠nimo de publicidade: **8 dias √∫teis**\n"
                "‚Ä¢ Invers√£o de fases (julgamento antes da habilita√ß√£o)\n"
                "‚Ä¢ Modalidade mais utilizada atualmente"
            )
        elif _match_any(msg, "di√°logo", "dialogo", "competitivo"):
            return (
                "**Di√°logo Competitivo** (novidade da Lei 14.133):\n"
                "‚Ä¢ Para **contrata√ß√µes complexas**\n"
                "‚Ä¢ Administra√ß√£o dialoga com licitantes antes da proposta final\n"
                "‚Ä¢ Prazo m√≠nimo: **25 dias**\n"
                "‚Ä¢ Usado quando a solu√ß√£o n√£o est√° clara no in√≠cio"
            )
        return (
            "**Modalidades na Lei 14.133/21**:\n"
            "‚Ä¢ **Concorr√™ncia**: obras/servi√ßos de maior valor\n"
            "‚Ä¢ **Preg√£o**: bens/servi√ßos comuns (mais usado)\n"
            "‚Ä¢ **Concurso**: trabalhos t√©cnicos/art√≠sticos\n"
            "‚Ä¢ **Leil√£o**: aliena√ß√£o de bens\n"
            "‚Ä¢ **Di√°logo Competitivo**: contrata√ß√µes complexas"
        )

    # 18) Fases da licita√ß√£o
    if _match_any(msg, "fases", "preparat√≥ria", "julgamento", "habilita√ß√£o", "invers√£o"):
        return (
            "**Fases da Licita√ß√£o** (Lei 14.133):\n"
            "1) **Preparat√≥ria**: planejamento, estudo t√©cnico, termo de refer√™ncia\n"
            "2) **Divulga√ß√£o**: edital no PNCP\n"
            "3) **Propostas**: apresenta√ß√£o pelos licitantes\n"
            "4) **Julgamento**: an√°lise das propostas\n"
            "5) **Habilita√ß√£o**: verifica√ß√£o de documentos (ap√≥s julgamento)\n"
            "6) **Recursos**: impugna√ß√µes\n"
            "7) **Homologa√ß√£o**: aprova√ß√£o final"
        )

    # 19) Limites e dispensa
    if _match_any(msg, "dispensa", "limites", "inexigibilidade", "100 mil", "50 mil"):
        return (
            "**Limites de Dispensa** (Lei 14.133):\n"
            "‚Ä¢ **At√© R$ 100 mil**: obras e servi√ßos de engenharia\n"
            "‚Ä¢ **At√© R$ 50 mil**: bens e outros servi√ßos\n"
            "\n**Inexigibilidade**: quando a competi√ß√£o √© invi√°vel\n"
            "‚Ä¢ Fornecedor exclusivo\n"
            "‚Ä¢ Servi√ßos de not√≥ria especializa√ß√£o\n"
            "‚Ä¢ Artistas consagrados"
        )

    # 20) Prazos da nova lei
    if _match_any(msg, "prazos", "publicidade", "impugna√ß√£o", "recursos", "8 dias"):
        return (
            "**Prazos M√≠nimos** (Lei 14.133):\n"
            "‚Ä¢ **Preg√£o/Concorr√™ncia**: 8 dias √∫teis\n"
            "‚Ä¢ **Leil√£o**: 15 dias\n"
            "‚Ä¢ **Concurso**: 45 dias\n"
            "‚Ä¢ **Di√°logo Competitivo**: 25 dias\n"
            "\n**Impugna√ß√£o**: 5 dias √∫teis (cidad√£os) / 2 dias (licitantes)\n"
            "**Recursos**: 3 dias √∫teis"
        )

    # 21) PNCP e publica√ß√£o
    if _match_any(msg, "pncp", "portal", "publica√ß√£o", "edital", "divulga√ß√£o"):
        return (
            "**Portal Nacional de Contrata√ß√µes P√∫blicas (PNCP)**:\n"
            "‚Ä¢ **Obrigat√≥rio** para todos os √≥rg√£os p√∫blicos\n"
            "‚Ä¢ Publica: editais, atas, dispensas, inexigibilidades, contratos\n"
            "‚Ä¢ Substitui o DOU para licita√ß√µes\n"
            "‚Ä¢ Garante transpar√™ncia e acesso √† informa√ß√£o"
        )

    # 22) Planejamento e estudo t√©cnico
    if _match_any(msg, "planejamento", "estudo t√©cnico", "termo de refer√™ncia", "pac", "plano anual"):
        return (
            "**Planejamento na Lei 14.133**:\n"
            "‚Ä¢ **PAC**: Plano Anual de Contrata√ß√µes (obrigat√≥rio)\n"
            "‚Ä¢ **Estudo T√©cnico Preliminar**: justifica a necessidade\n"
            "‚Ä¢ **Termo de Refer√™ncia**: descreve objeto e condi√ß√µes\n"
            "‚Ä¢ **An√°lise de Riscos**: identifica e mitiga riscos\n"
            "‚Ä¢ **Estimativa de Custos**: or√ßamento (pode ser sigiloso)"
        )

    # 23) Contratos e gest√£o
    if _match_any(msg, "dura√ß√£o", "reajuste", "repactua√ß√£o", "fiscal", "gestor"):
        return (
            "**Contratos na Lei 14.133**:\n"
            "‚Ä¢ **Dura√ß√£o**: at√© 5 anos (10 em servi√ßos cont√≠nuos, 15 em tecnologia)\n"
            "‚Ä¢ **Reajuste**: anual por √≠ndice oficial\n"
            "‚Ä¢ **Repactua√ß√£o**: servi√ßos cont√≠nuos com m√£o de obra\n"
            "‚Ä¢ **Fiscal**: acompanha execu√ß√£o di√°ria\n"
            "‚Ä¢ **Gestor**: respons√°vel geral pelo contrato"
        )

    # 24) San√ß√µes e penalidades
    if _match_any(msg, "san√ß√µes", "penalidades", "multa", "inidoneidade", "impedimento"):
        return (
            "**San√ß√µes** (Lei 14.133):\n"
            "‚Ä¢ **Advert√™ncia**: para infra√ß√µes leves\n"
            "‚Ä¢ **Multa**: percentual sobre o valor\n"
            "‚Ä¢ **Impedimento**: at√© 3 anos para licitar\n"
            "‚Ä¢ **Inidoneidade**: v√°lida em todo o pa√≠s\n"
            "Aplicadas conforme gravidade da infra√ß√£o"
        )

    # 25) Registro de pre√ßos
    if _match_any(msg, "registro de pre√ßos", "ata", "12 meses", "arp"):
        return (
            "**Sistema de Registro de Pre√ßos**:\n"
            "‚Ä¢ **Ata**: compromisso para futuras contrata√ß√µes\n"
            "‚Ä¢ **Vig√™ncia**: at√© 12 meses (prorrog√°vel por mais 12)\n"
            "‚Ä¢ Fornecedores se comprometem com pre√ßos registrados\n"
            "‚Ä¢ Permite contrata√ß√µes conforme demanda"
        )

    # ====== SAUDA√á√ïES / PEQUENO TALK ======
    if _match_any(msg, "oi", "ol√°", "ola", "bom dia", "boa tarde", "boa noite"):
        return "Ol√°! üëã Sou o assistente do Sistema Municipal. Em que posso ajudar hoje?"

    # ====== FALLBACK ======
    # 26) Perguntas espec√≠ficas da Lei 14.133 - Parte 1
    if _match_any(msg, "quando obrigat√≥ria", "1 abril 2023", "abril 2023"):
        return "A Lei 14.133/21 **passou a ser obrigat√≥ria em 1¬∫ de abril de 2023** para todos os √≥rg√£os e entidades p√∫blicas."

    if _match_any(msg, "fase preparat√≥ria", "preparatoria"):
        return (
            "**Fase Preparat√≥ria**: planejamento da contrata√ß√£o incluindo:\n"
            "‚Ä¢ Estudo t√©cnico preliminar\n"
            "‚Ä¢ An√°lise de riscos\n"
            "‚Ä¢ Estimativa de custos\n"
            "‚Ä¢ Elabora√ß√£o do termo de refer√™ncia"
        )

    if _match_any(msg, "crit√©rios de julgamento", "criterios", "menor pre√ßo", "melhor t√©cnica"):
        return (
            "**Crit√©rios de Julgamento** (Lei 14.133):\n"
            "‚Ä¢ Menor pre√ßo\n"
            "‚Ä¢ Maior desconto\n"
            "‚Ä¢ Melhor t√©cnica\n"
            "‚Ä¢ T√©cnica e pre√ßo\n"
            "‚Ä¢ Maior lance ou oferta\n"
            "‚Ä¢ Maior retorno econ√¥mico"
        )

    if _match_any(msg, "agente de contrata√ß√£o", "comiss√£o"):
        return "**Agente de Contrata√ß√£o**: servidor designado para conduzir a licita√ß√£o, podendo atuar sozinho ou em comiss√£o."

    if _match_any(msg, "or√ßamento sigiloso", "valor estimado"):
        return "**Or√ßamento Sigiloso**: valor estimado pela Administra√ß√£o que pode ser mantido em sigilo at√© o t√©rmino da licita√ß√£o para evitar manipula√ß√£o."

    if _match_any(msg, "matriz de riscos", "riscos"):
        return "**Matriz de Riscos**: anexo contratual que define responsabilidades da Administra√ß√£o e do contratado diante de eventos imprevistos."

    # 27) Perguntas espec√≠ficas da Lei 14.133 - Parte 2
    if _match_any(msg, "gest√£o de riscos", "identifica√ß√£o", "an√°lise"):
        return "**Gest√£o de Riscos**: identifica√ß√£o, an√°lise e tratamento de riscos da contrata√ß√£o, **obrigat√≥ria** na Nova Lei."

    if _match_any(msg, "bens comuns", "servi√ßos comuns", "padr√µes de desempenho"):
        return "**Bens e Servi√ßos Comuns**: aqueles cujos padr√µes de desempenho podem ser objetivamente definidos no edital, permitindo comparabilidade."

    if _match_any(msg, "bens especiais", "servi√ßos especiais", "especifica√ß√µes t√©cnicas"):
        return "**Bens e Servi√ßos Especiais**: os que exigem especifica√ß√µes t√©cnicas diferenciadas, n√£o enquadrados como comuns."

    if _match_any(msg, "princ√≠pios", "legalidade", "transpar√™ncia", "efici√™ncia"):
        return (
            "**Princ√≠pios da Lei 14.133**:\n"
            "‚Ä¢ Legalidade, impessoalidade, moralidade\n"
            "‚Ä¢ Igualdade, publicidade, efici√™ncia\n"
            "‚Ä¢ **Planejamento, transpar√™ncia, seguran√ßa jur√≠dica**"
        )

    if _match_any(msg, "controle interno", "controle externo", "tribunais de contas"):
        if _match_any(msg, "externo", "tribunais"):
            return "**Controle Externo**: exercido pelos Tribunais de Contas, que fiscalizam a legalidade e gest√£o das contrata√ß√µes p√∫blicas."
        return "**Controle Interno**: estrutura da Administra√ß√£o respons√°vel por acompanhar a legalidade, efici√™ncia e economicidade das contrata√ß√µes."

    if _match_any(msg, "governan√ßa", "integridade", "transpar√™ncia"):
        return "**Governan√ßa das Contrata√ß√µes**: pr√°ticas e mecanismos para assegurar integridade, efici√™ncia e transpar√™ncia nos processos de compras p√∫blicas."

    # ====== LEI 14.133 - QUEST√ïES PR√ÅTICAS DE IMPLEMENTA√á√ÉO ======
    # 28) Estudo T√©cnico Preliminar (ETP)
    if _match_any(msg, "estudo t√©cnico preliminar", "etp", "como fazer etp"):
        return (
            "**Como fazer o Estudo T√©cnico Preliminar (ETP)**:\n"
            "1Ô∏è‚É£ **Descri√ß√£o da necessidade**\n"
            "2Ô∏è‚É£ **Levantamento de solu√ß√µes existentes**\n"
            "3Ô∏è‚É£ **Justificativa da escolha**\n"
            "4Ô∏è‚É£ **Estimativa de custos**\n"
            "5Ô∏è‚É£ **An√°lise de viabilidade**\n"
            "6Ô∏è‚É£ **Avalia√ß√£o de riscos**\n"
            "O ETP serve de **base para o termo de refer√™ncia**."
        )

    # 29) Termo de Refer√™ncia - elabora√ß√£o
    if _match_any(msg, "como elaborar", "termo de refer√™ncia", "elaborar termo"):
        return (
            "**Como elaborar o Termo de Refer√™ncia**:\n"
            "‚Ä¢ **Objeto detalhado** e justificativa da contrata√ß√£o\n"
            "‚Ä¢ **Requisitos t√©cnicos** e crit√©rios de medi√ß√£o\n"
            "‚Ä¢ **Forma de pagamento** e prazos\n"
            "‚Ä¢ **Garantias** e obriga√ß√µes das partes\n"
            "‚Ä¢ **Penalidades** aplic√°veis"
        )

    # 30) Or√ßamento estimado - pesquisa de pre√ßos
    if _match_any(msg, "or√ßamento estimado", "pesquisa de pre√ßos", "como montar or√ßamento"):
        return (
            "**Como montar o or√ßamento estimado**:\n"
            "üìä **Pesquisa em pelo menos 3 fontes**:\n"
            "‚Ä¢ **Contratos semelhantes** no PNCP\n"
            "‚Ä¢ **Pain√©is de pre√ßos** de √≥rg√£os oficiais\n"
            "‚Ä¢ **Consulta a fornecedores**\n"
            "üéØ A **m√©dia ponderada** embasa o valor da licita√ß√£o"
        )

    # 31) PAC - montagem pr√°tica
    if _match_any(msg, "como montar pac", "plano anual contrata√ß√µes", "montar plano anual"):
        return (
            "**Como montar o Plano Anual de Contrata√ß√µes (PAC)**:\n"
            "1Ô∏è‚É£ **Consolidar demandas** das secretarias\n"
            "2Ô∏è‚É£ **Justificar necessidades** e priorizar recursos\n"
            "3Ô∏è‚É£ **Estimar valores** e cronograma\n"
            "4Ô∏è‚É£ **Publicar no PNCP** at√© o prazo legal\n"
            "√â a **lista de todas as contrata√ß√µes** previstas para o exerc√≠cio."
        )

    # 32) Passo a passo da licita√ß√£o
    if _match_any(msg, "passo a passo", "fluxo licita√ß√£o", "etapas licita√ß√£o"):
        return (
            "**Passo a passo da licita√ß√£o** (Lei 14.133):\n"
            "1Ô∏è‚É£ **Planejamento**: ETP, TR, or√ßamento, PAC\n"
            "2Ô∏è‚É£ **Publica√ß√£o** do edital no PNCP\n"
            "3Ô∏è‚É£ **Recebimento** de propostas\n"
            "4Ô∏è‚É£ **Julgamento** das propostas\n"
            "5Ô∏è‚É£ **Habilita√ß√£o** do vencedor\n"
            "6Ô∏è‚É£ **Recursos** (se houver)\n"
            "7Ô∏è‚É£ **Homologa√ß√£o** e adjudica√ß√£o\n"
            "8Ô∏è‚É£ **Assinatura** do contrato"
        )

    # 33) Fiscaliza√ß√£o de contratos
    if _match_any(msg, "como fiscalizar", "fiscalizar contrato", "fiscal contrato"):
        return (
            "**Como fiscalizar um contrato municipal**:\n"
            "üîç **O fiscal deve**:\n"
            "‚Ä¢ **Acompanhar** entregas e servi√ßos\n"
            "‚Ä¢ **Registrar** em relat√≥rios\n"
            "‚Ä¢ **Atestar** notas fiscais\n"
            "‚Ä¢ **Comunicar** irregularidades\n"
            "‚Ä¢ **Propor penalidades** quando cab√≠vel"
        )

    # 34) Registro de riscos pr√°tico
    if _match_any(msg, "como registrar riscos", "registrar riscos", "matriz riscos pr√°tica"):
        return (
            "**Como registrar riscos na contrata√ß√£o**:\n"
            "üìã **A matriz de riscos deve**:\n"
            "‚Ä¢ **Identificar** eventos poss√≠veis (atrasos, falhas t√©cnicas, reajustes)\n"
            "‚Ä¢ **Avaliar impacto** de cada risco\n"
            "‚Ä¢ **Definir responsabilidades**: contratado ou Administra√ß√£o\n"
            "‚Ä¢ **Estabelecer** medidas de mitiga√ß√£o"
        )

    # 35) Responsabilidades do gestor
    if _match_any(msg, "responsabilidades gestor", "gestor contrato", "o que faz gestor"):
        return (
            "**Responsabilidades do gestor do contrato**:\n"
            "‚öñÔ∏è **Garante** execu√ß√£o fiel do objeto\n"
            "üí∞ **Autoriza** pagamentos\n"
            "ü§ù **Interage** com o fiscal\n"
            "üì¢ **Comunica** falhas\n"
            "üèõÔ∏è **Representa** a Administra√ß√£o perante o contratado"
        )

    # 36) Aplica√ß√£o de penalidades
    if _match_any(msg, "como aplicar penalidades", "aplicar penalidades", "penalizar contratado"):
        return (
            "**Como aplicar penalidades ao contratado**:\n"
            "1Ô∏è‚É£ **Fiscal relata** a ocorr√™ncia\n"
            "2Ô∏è‚É£ **Gestor notifica** o contratado\n"
            "3Ô∏è‚É£ **Abre prazo** para defesa\n"
            "4Ô∏è‚É£ **Autoridade decide**: advert√™ncia, multa, impedimento ou inidoneidade\n"
            "5Ô∏è‚É£ **Registra** a penalidade no PNCP"
        )

    # 37) Obras p√∫blicas - cuidados especiais
    if _match_any(msg, "obras p√∫blicas", "projeto b√°sico", "cronograma f√≠sico"):
        return (
            "**O que observar em obras p√∫blicas**:\n"
            "üìê **Projeto b√°sico** completo\n"
            "üìÖ **Cronograma** f√≠sico-financeiro\n"
            "üí∞ **Or√ßamento** detalhado\n"
            "üìã **ART/RRT** dos respons√°veis t√©cnicos\n"
            "üîç **An√°lise de viabilidade**\n"
            "‚ö†Ô∏è **Matriz de riscos** espec√≠fica para obras"
        )

    # ====== FALLBACK ORIGINAL ======
    if _match_any(msg, "empenho", "empenhos"):
        return "Empenhos reservam recurso or√ßament√°rio. Quer **criar**, **consultar status** ou **exportar**?"

    if _match_any(msg, "contrato", "contratos"):
        return "Quer **cadastrar contrato**, **aditivo** ou **ver situa√ß√£o** dos contratos ativos?"

    if _match_any(msg, "nota", "notas", "nf", "nota fiscal", "notas fiscais"):
        return "Sobre **notas fiscais**: posso explicar **lan√ßamento**, **status** ou **pagamentos**. O que deseja?"

    # Default bem-educado
    return (
        "Entendi. Posso falar sobre **empenhos, contratos, notas, relat√≥rios, KPIs, prazos** e **exporta√ß√µes**.\n"
        "Diga em poucas palavras o que precisa (ex.: *relat√≥rio financeiro do m√™s*, *criar empenho*, *aditivo de contrato*)."
    )

def _generate_ai_response(user_text: str) -> str:
    """
    Gera√ß√£o de resposta inteligente:
    1¬∫ - Busca no Knowledge Base (KB) 
    2¬∫ - Se n√£o achou, usa OpenAI (se dispon√≠vel)
    3¬∫ - Fallback para respostas mock est√°veis
    """
    
    # üîé 1¬∫ PRIORIDADE: Buscar no Knowledge Base
    kb_match = kb_best_match(user_text)
    if kb_match:
        return f"üìö **KB**: {kb_match['answer']}\n\n*Baseado na pergunta: \"{kb_match['question']}\"*"
    
    # ü§ñ 2¬∫ PRIORIDADE: OpenAI (se dispon√≠vel)
    if OPENAI_AVAILABLE:
        try:
            resp = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um assistente para gest√£o municipal (empenhos/contratos). Seja claro e √∫til."},
                    {"role": "user", "content": user_text}
                ],
                max_tokens=500,
                temperature=0.7,
                timeout=20
            )
            return f"ü§ñ **IA**: {resp.choices[0].message['content']}"
        except Exception as e:
            # Se a API falhar, n√£o quebra o fluxo
            pass
    
    # üí° 3¬∫ PRIORIDADE: Fallback mock est√°vel  
    return f"üí° **Sistema**: {generate_mock_response(user_text)}"

def _mock_response(text: str) -> str:
    """Fun√ß√£o legada mantida para compatibilidade"""
    return generate_mock_response(text)
